// set up a simple neutral simulation
initialize() {
	initializeMutationRate(1e-7);
 	initializeMutationType("m1", 0.5, "f", 0.0);
 	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
 	initializeRecombinationRate(1e-8);
}

// create a population of 812 individuals, to match ne of other script
1 {
	sim.addSubpop("p1", 812);
}

2000 late() { 
	samp = p1.sampleIndividuals(10);

	// get the unique mutations in the sim, sorted by position
	m = sortBy(unique(samp.genomes.mutations), "position");

	// print the number of segregating sites
	cat("Segsites (S): " + size(m) + "\n"); 

	// Calculate mean nucleotide heterozygosity across the population
 	total = 0.0;

	for (ind in samp)
	{
		// Calculate the nucleotide heterozygosity of this individual
		muts0 = ind.genomes[0].mutations;
		muts1 = ind.genomes[1].mutations;

		// Count the shared mutations
		shared_count = sum(match(muts0, muts1) >= 0);

		// All remaining mutations are unshared (i.e. heterozygous)
		unshared_count = muts0.size() + muts1.size() - 2 * shared_count;

		// pi is the mean heterozygosity across the chromosome
		pi_ind = unshared_count; // (sim.chromosome.lastPosition + 1);
		total = total + pi_ind;
	}

	pi = total / samp.size();

	cat("Average Pairwise (Pi): " + pi + "\n");
}
